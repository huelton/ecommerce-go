definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  controllers.SuccessResponse:
    properties:
      success:
        type: string
    type: object
  models.Order:
    properties:
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItems'
        type: array
      status:
        type: string
      user_id:
        type: integer
    type: object
  models.OrderItems:
    properties:
      id:
        type: integer
      order_id:
        type: integer
      product_id:
        type: integer
      quantity:
        type: integer
      unit_price:
        type: number
    type: object
  models.Product:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      name:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/orders:
    get:
      description: Retorna todos os pedidos dos usuarios autenticado como admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Error to find Order
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Lista os pedidos de todos os usuarios Admin
      tags:
      - Dashboard Admin
  /login:
    post:
      consumes:
      - application/json
      description: Autentica um usuário e retorna um token
      parameters:
      - description: Credenciais do usuário
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: User not Found or Invalid Password
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Error in find User
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Login de usuário
      tags:
      - Auth
  /orders:
    get:
      description: Retorna todos os pedidos associados ao usuário autenticado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "500":
          description: Error to find Order
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Lista os pedidos de um usuário
      tags:
      - Pedidos
    post:
      consumes:
      - application/json
      description: Cria um pedido para o usuário autenticado com os itens fornecidos
      parameters:
      - description: Dados do pedido
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Invalid Product
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Error to insert Item Order
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cria um novo pedido
      tags:
      - Pedidos
  /orders/{id}/payment:
    post:
      consumes:
      - application/json
      description: Atualiza o status de um pedido para "pago", se ele ainda não estiver
        pago
      parameters:
      - description: ID do Pedido
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pagamento realizado com sucesso
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Pedido já está pago
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Pedido não encontrado
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Erro interno ao processar o pedido
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Realiza o pagamento de um pedido
      tags:
      - Pedidos
  /products:
    get:
      description: Retorna uma lista com todos os produtos disponíveis no banco de
        dados
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Error to find products
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Lista todos os produtos
      tags:
      - Produtos
    post:
      consumes:
      - application/json
      description: Retorna um produto criado
      parameters:
      - description: Dados do produto
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - BearerAuth: []
      summary: Cria um Produto
      tags:
      - Produtos
  /register:
    post:
      consumes:
      - application/json
      description: Cria um novo usuário no sistema
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Error in insert User
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Registro de usuário
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: 'Informe o token JWT no formato: Bearer {seu_token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
